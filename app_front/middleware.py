import traceback
from django.conf import settings
from django.http import JsonResponse
from django.middleware.csrf import CsrfViewMiddleware
from django.shortcuts import render
from django.utils.deprecation import MiddlewareMixin
from app_bot.management.bot_core import sync_bot
from app_front.management.email.email_sender import my_logger
from app_front.management.unregister_authorization.token import check_token, create_token
from app_front.management.unregister_authorization.unregister_web_users import generate_random_name
from app_front.management.utils import get_user_ip
from legacy.models import WebUsers

class UnregisterAuthMiddleware:
    token = ''
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        if request.session.exists(request.session.session_key):
            response = self.get_response(request)
            return response

        token = request.COOKIES.get('ShipKZAuthorization')
        if not token:
            self.handle_no_token(request)
        else:
            self.handle_token(request, token)

        response = self.get_response(request)
        response.set_cookie('ShipKZAuthorization', self.token, max_age=60*60*24*14)
        return response

    def handle_no_token(self, request):
        new_username = generate_random_name()
        new_username = 'UNREG_' + new_username
        web_user = WebUsers.objects.create(web_username=new_username)
        user_ip = get_user_ip(request)
        new_token = create_token(username=new_username,
                                 user_id=web_user.user_id,
                                 ip=user_ip)
        self.token = new_token

    def handle_token(self, request, token):
        decoded_token = check_token(token)
        if decoded_token:
            self.token = token
        else:
            self.handle_no_token(request)


class RemoveCORSHeadersForYandexMetrikaMiddleware:
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        response = self.get_response(request)
        referer = request.META.get('HTTP_REFERER', '')

        if "metrika.yandex.ru" in referer:
            # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
            if 'Cross-Origin-Opener-Policy' in response:
                del response['Cross-Origin-Opener-Policy']
            if 'Cross-Origin-Resource-Policy' in response:
                del response['Cross-Origin-Resource-Policy']
        return response


class CustomCsrfMiddleware(CsrfViewMiddleware):
    def _reject(self, request, reason):
        """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É CSRF –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram"""
        user_id = request.user.id if request.user.is_authenticated else "Anonymous"
        user_agent = request.META.get("HTTP_USER_AGENT", "Unknown")
        IP = get_user_ip(request)

        # üîπ –õ–æ–≥–∏—Ä—É–µ–º CSRF-—Ç–æ–∫–µ–Ω—ã
        csrf_cookie = request.COOKIES.get('csrftoken', '–ü—É—Å—Ç–æ–π')
        csrf_header = request.headers.get('X-CSRFToken', '–ü—É—Å—Ç–æ–π')

        my_logger.error(f"‚ö†Ô∏è CSRF ERROR for user {user_id}: {reason}")
        my_logger.error(f"üåê IP: {IP}")
        my_logger.error(f"üñ• User-Agent: {user_agent}")
        my_logger.error(f"üîó Path: {request.path}, Method: {request.method}")
        my_logger.error(f"üîí CSRF-Token –∏–∑ Cookie: {csrf_cookie}")
        my_logger.error(f"üì© CSRF-Token –∏–∑ Headers: {csrf_header}")

        message = (
            f"<b>‚ö† CSRF Error Detected ‚ö†</b>\n"
            f"<b>üîó Path:</b> {request.path}\n"
            f"<b>üõ† Method:</b> {request.method}\n"
            f"<b>üôç User ID:</b> {user_id}\n"
            f"<b>üñ• Browser:</b> {user_agent}\n"
            f"<b>üí• CSRF Error:</b> {reason}\n"
            f"<b>üåê IP:</b> {IP}\n"
            f"<b>üîí CSRF-Token –∏–∑ Cookie:</b> {csrf_cookie}\n"
            f"<b>üì© CSRF-Token –∏–∑ Headers:</b> {csrf_header}"
        )
        try:
            sync_bot.send_message(chat_id=settings.ORDERS_CATCH_CHAT, text=message)
        except Exception as e:
            my_logger.error(f"‚ùå Failed to send CSRF error to Telegram: {e}")
        return render(request, "pages/csrf-error.html", status=403)




class ExceptionHandlingMiddleware(MiddlewareMixin):
    def process_exception(self, request, exception):
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            f"<b>Error in Application:</b>\n"
            f"<b>Path:</b> {request.path}\n"
            f"<b>Method:</b> {request.method}\n"
            f"<b>Exception:</b> {exception.__class__.__name__}\n"
            f"<b>Message:</b> {str(exception)}\n\n"
            f"<b>Traceback:</b>\n<pre>{traceback.format_exc()}</pre>"
        )
        try:
            sync_bot.send_message(chat_id=settings.ORDERS_CATCH_CHAT, text=message)
        except Exception as e:
            print(f"Failed to send error message to Telegram: {e}")
        return JsonResponse({"error": "An unexpected error occurred"}, status=500)